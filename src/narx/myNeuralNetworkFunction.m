function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 15-Jun-2014 21:03:19.
% 
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
% 
%   X = 2xTS cell, 2 inputs over TS timsteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
% 
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 7xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
% 
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
% 
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 7xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
% 
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-0.054261984;-0.052331177;-0.054815959;-0.050447588;-0.053849474;-0.048816774;-0.038564463];
  x1_step1_gain = [16.3094404488671;17.9724056715592;19.0225006507597;17.9088060849968;17.0008764121799;17.2623261013768;23.1564582076758];
  x1_step1_ymin = -1;
  
  % Input 2
  x2_step1_xoffset = -0.084715902;
  x2_step1_gain = 10.7911769351801;
  x2_step1_ymin = -1;
  
  % Layer 1
  b1 = [-1.7683577164715169605;-1.5875598937059576254;-0.94212636328202115088;0.59089194099065478483;0.12449844229628781456;-0.18342999916335911426;-0.51439752389039805625;-0.88495569069991386613;1.2415181300954463151;1.7265168658169793847];
  IW1_1 = [0.38971145946203877841 -0.30908292147040417053 0.24575675573810928931 0.22845127799793787937 -0.54567565146042151802 -0.41433685483254001358 0.00079562137668905130727 -0.33781817115090645443 0.5681843003910381773 -0.2345361102652194496 -0.25231841134545163197 -0.44943329520851083014 -0.14420207954041586174 0.51390388950210774688;0.58217876243832422656 0.085551288940052927501 -0.44879890949106160392 -0.3562471789439269898 -0.40134163178356713209 0.02438751047715369269 0.16955094291633582282 0.0011059063180387310177 -0.4349557114886437037 0.33442235011451643123 0.56330059623777350986 0.086261057885360953312 0.51625485321809183592 -0.19066676735966731071;0.43095600809314460466 -0.48284577038731169019 0.48694416557412417701 -0.2380965644750218102 -0.15279609460584259173 -0.76724399696213341215 -0.61519542129239990214 -0.055435484996867109841 0.10901173736815125692 -0.057468201600049839683 -0.10892573040392472539 0.46406832912555179282 -0.36095691171290711363 -0.018637763920860764277;-0.048843396261239971357 -0.40899165725747216316 -0.61671684089005351925 -0.48946082043923516691 -0.037595874678321740403 -0.47419358820120122155 -0.092549505452825225893 0.57902644561121707767 0.23413627582745683009 -0.5022868814640116808 -0.56933949292554841826 -0.42853870396321930292 0.25209670875402728774 -0.25232478459650686808;-0.48053272624647375144 -0.29979582418923717002 -0.068427383385655765613 0.10415452380384825071 -0.61716973108675987625 -0.52949865683575414455 -0.17184937020913296224 -0.42556230803655215045 -0.46864773130754566743 0.067080541741023042013 0.13111118678969729823 0.57457015567676195111 0.48092098175706221586 -0.10176287741530246067;-0.55526318393392437578 0.13208405911911799691 -0.32731381362275335789 0.53976044293876157543 0.020575648530774030831 0.3892743726154584416 -0.52138908819535001449 0.44416004063931224799 -0.22120752977006449824 0.55820068791164345612 -0.049261014290960934703 -0.56694404751306903822 -0.55077982316046714129 0.38831113514903481398;-0.057102014643145418415 0.012239425657974891543 0.35901107271284665723 -0.46705252189365725757 0.38634191206213591707 0.61019260241312112125 0.60147710917982799561 0.40163976842510040743 0.23167969569948115849 0.12663661346646387651 -0.39452672293647439439 -0.36583316274782085031 -0.49498565770981872713 -0.45513494455162922803;-0.16070895698370632476 0.41150905307248331066 0.52823220801082115816 0.59689678025076076118 0.25974843967392363675 -0.094286610652380933861 0.38121560240897112148 0.047353490436788776841 0.061727507572503344246 0.34123165236673136391 0.68388710643476613438 -0.38936146144510996869 -0.66778963291953596926 -0.52262419095858236862;0.51951676848985706147 0.43571513540491491057 -0.50806217107116546927 -0.22677612096168600631 0.56166391986594876862 -0.14972529592235325757 -0.46335454113814955601 -0.41841697667854471643 -0.27324849053702870982 -0.52238759188200223349 0.15404621333419704632 -0.19953318242525991399 -0.11964805390342284075 -0.52666401389926020826;0.063442160480018147672 -0.48279050656594468816 0.28041878234822043003 0.57195275759582830943 -0.10971349677190629646 0.40871305465744955931 -0.36569408170418399306 0.14589314899734534547 -0.51765882819404174242 -0.065991971899836840421 0.62969609528067449489 -0.019027520024608418625 0.22783974249250782407 -0.15414591146720352244];
  IW1_2 = [0.70876969317296534268 0.05112106152676510612;-0.39900898173919618905 -0.07439120410562813368;0.54842027345017263507 -0.31485684054556006828;0.19153022144550135852 0.2840634667323068685;0.047982042793689796967 0.46462185276878331663;-0.042029324176512623812 0.36774376544165532366;0.16082199838971888983 -0.66580599615397406676;-0.20614017666713363441 0.2169473817530425952;0.24662963485228781013 -0.49494355416773150314;0.74355234066717923458 -0.15685168000362526008];
  
  % Layer 2
  b2 = -0.19318416349956107902;
  LW2_1 = [0.68565865266381653687 -0.7012635925306685003 0.3554250957868198002 0.23296380427787211076 -0.69027913812728947107 -0.10034781582900145769 -0.51250797630907107827 0.12214762639012338719 0.0011203567322681795559 0.2075175407776879144];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 10.7911769351801;
  y1_step1_xoffset = -0.084715902;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  if (nargin < 2), error('Initial input states Xi argument needed.'); end
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  elseif ~isempty(Xi)
    Q = size(Xi{1},2);
  else
    Q = 0;
  end
  
  % Input 1 Delay States
  Xd1 = cell(1,3);
  for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  end
  
  % Input 2 Delay States
  Xd2 = cell(1,3);
  for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
  
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  finalxts = TS+(1: 2);
  xits = finalxts(finalxts<=2);
  xts = finalxts(finalxts>2)-2;
  Xf = [Xi(:,xits) X(:,xts)];
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
